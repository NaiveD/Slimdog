* E8 Test function: shifted Griewank function (5-D)
* Expected optimum: 0 at (2.4563, -7.4325, 4.4224, 10.6642, -12.2141)
* Parameter space: (-600, 600)^5
* Number of Iterations: 20 + 200 (First 20 iterations as random search in the continuous space, and all runs have the same random seed)

```
    # E8: Griewank Function (5-D)
    # Expected optimum: 0 at (2.4563, -7.4325, 4.4224, 10.6642, -12.2141)

    x1 = x1 - 2.4563
    x2 = x2 + 7.4325
    x3 = x3 - 4.4224
    x4 = x4 - 10.6642
    x5 = x5 + 12.2141

    result = (x1**2/4000 + x2**2/4000 + x3**2/4000 + x4**2/4000 + x5**2/4000) - cos(x1/1**0.5) * cos(x2/2**0.5) * cos(x3/3**0.5) * cos(x4/4**0.5) * cos(x5/5**0.5) + 1
    return -result

```



* Continuous:
Best target and parameters:
{'target': -1.163233044494576, 'params': {'x1': -19.394238069570406, 'x2': -10.250035794092355, 'x3': -17.266284013880977, 'x4': -3.7354387192118566, 'x5': -24.388329863292142}}

* Discrete:
* Setup1: para_space = list(np.arange(-600, 601, 1200/10)) # S1
Best target and parameters: 
{'target': -0.954155426002806, 'params': {'x1': 0.0, 'x2': 0.0, 'x3': 0.0, 'x4': 0.0, 'x5': 0.0}}

* Setup2: para_space = list(np.arange(-600, 601, 1200/100)) # S2
Best target and parameters: 
{'target': -1.1353553794259013, 'params': {'x1': -24.0, 'x2': -12.0, 'x3': -12.0, 'x4': 0.0, 'x5': -12.0}}

* Setup3: para_space = list(np.arange(-600, 601, 1200/1000)) # S3
Best target and parameters: 
{'target': -0.9316441951622279, 'params': {'x1': 9.600000000023101, 'x2': 1.2000000000227828, 'x3': -10.799999999977672, 'x4': 2.4000000000228283, 'x5': -27.59999999997831}}

* Setup4: para_space = list(np.arange(-600, 601, 1200/10000)) # S4
Best target and parameters: 
{'target': -0.9372228229786709, 'params': {'x1': 3.3600000000228647, 'x2': -7.679999999977554, 'x3': -10.079999999977645, 'x4': 17.400000000023397, 'x5': -28.19999999997833}}

* Setup5: para_space = list(np.arange(-600, 601, 1200/100000)) # S5
Best target and parameters: 
{'target': -0.9017084298087666, 'params': {'x1': -0.8760000028153172, 'x2': -26.220000002696224, 'x3': -15.528000002746467, 'x4': 23.459999997070327, 'x5': -6.060000002790957}}



* AGP:
* Setup 1: 

```
    if i < 20:
        # First 20 iterations as random search in the continuous space

    # Get the discrete Parameters 
    elif (20 <= i < 40): # divide the parameter space into 10 discrete values 
        para_space = list(np.arange(-600, 601, 1200/10))
    elif (40 <= i < 60): # divide the parameter space into 100 discrete values 
        para_space = list(np.arange(-600, 601, 1200/100))
    elif (60 <= i < 80): # divide the parameter space into 1000 discrete values 
        para_space = list(np.arange(-600, 601, 1200/1000))
    elif (80 <= i < 100): # divide the parameter space into 10000 discrete values 
        para_space = list(np.arange(-600, 601, 1200/10000))
    elif (100 <= i < 120): # divide the parameter space into 100000 discrete values 
        para_space = list(np.arange(-600, 601, 1200/100000))
    else: 
        # ( 120 <= i < 220) just take the continuous value

```

Best target and parameters: 
{'target': -0.954155426002806, 'params': {'x1': 0.0, 'x2': 0.0, 'x3': 0.0, 'x4': 0.0, 'x5': 0.0}}

* Setup 2:

```
    # First 20 iterations as random search in the continuous space
    if i < 20:
        # E8: Griewank Function (5-D)
        # Expected optimum: 0 at (2.4563, -7.4325, 4.4224, 10.6642, -12.2141)
        x1 = x1 - 2.4563
        x2 = x2 + 7.4325
        x3 = x3 - 4.4224
        x4 = x4 - 10.6642
        x5 = x5 + 12.2141

        result = (x1**2/4000 + x2**2/4000 + x3**2/4000 + x4**2/4000 + x5**2/4000) - cos(x1/1**0.5) * cos(x2/2**0.5) * cos(x3/3**0.5) * cos(x4/4**0.5) * cos(x5/5**0.5) + 1
        return -result 

    # Get the discrete Parameters 
    elif (i < 50): # divide the parameter space into 10 discrete values 
        para_space = list(np.arange(-600, 601, 1200/10))
    elif (i < 80): # divide the parameter space into 100 discrete values 
        para_space = list(np.arange(-600, 601, 1200/100))
    elif (i < 110): # divide the parameter space into 1000 discrete values 
        para_space = list(np.arange(-600, 601, 1200/1000))
    elif (i < 140): # divide the parameter space into 10000 discrete values 
        para_space = list(np.arange(-600, 601, 1200/10000))
    elif (i < 170): # divide the parameter space into 100000 discrete values 
        para_space = list(np.arange(-600, 601, 1200/100000))
    else: 
        # ( 170 <= i < 220) just take the continuous value

```

Best target and parameters: 
{'target': -0.954155426002806, 'params': {'x1': 0.0, 'x2': 0.0, 'x3': 0.0, 'x4': 0.0, 'x5': 0.0}}